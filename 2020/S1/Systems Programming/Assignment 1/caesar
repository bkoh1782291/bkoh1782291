#!/bin/bash

#encoding (shifts by 23)
#echo "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG" | tr '[A-Z]' '[X-ZA-W]'

#decoding
#echo "QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD" | tr '[X-ZA-W]' '[A-Z]'

# read input 
# ./caesar -n 23 -u
# THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG <--input
# QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD <--output

# calls the create_pattern script to create the pattern and using that pattern in a call to tr
#until eof (ctrl+D)

touch caesar.txt
touch string1.txt

#if no parameters
if [ "$#" -lt 1 ]
then
    echo  "Please insert at least one argument"
exit
fi

#uppercase (case 0)
if [[ ("$3" == "-u" && "$1" == "-n") || ("$3" == "-n" && "$1" == "-u") || ("$1" == "-n" && "$2" == "-u") || ("$2" == "-n" && "$3" == "-u") || ("$1" == "-u" && "$2" == "-n") || ("$1" -eq 0 && "$2" == "-u" && "$3" == "-n") ]]
    then
        if [[ ( "$2" -eq '0' && "$2" != "-n" && "$2" != "-u" )  ]]
        then
            ./create_pattern -n 0 -u > caesar.txt
        fi
else
#lowercase (case 0)
        if [[ ("$2" -eq '0') ]]
        then
           ./create_pattern -n 0 > caesar.txt
        fi
fi

#uppercase ( case 1-25 )
if [[ ("$3" == "-u" && "$1" == "-n") || ("$3" == "-n" && "$1" == "-u") || ("$1" == "-n" && "$2" == "-u") || ("$2" == "-n" && "$3" == "-u") || ("$1" == "-u" && "$2" == "-n") || ("$2" == "-u" && "$3" == "-n") ]]
    then
        for c2 in {1..25}
        do
            if [[ ($2 -eq c2) ]]
            then
                ./create_pattern -n $2 -u > caesar.txt
            fi
        done
#lower case (case 1-25)
elif [[ ("$1" == "-n") || ("$2" == "-n") ]]
then
        for c2 in {1..25}
        do  
            if [[ "$2" -eq c2 ]]
            then
                ./create_pattern -n $2 > caesar.txt
            fi
        done
fi

#placing the pattern from first script into a variable
input=`cat caesar.txt`

#reads input until eOF (ctrl+D)
while 
IFS= read -r line
do
    printf '%s\n' "$line" > string1.txt

    if [[ ("$3" == "-u" && "$1" == "-n") || ("$3" == "-n" && "$1" == "-u") || ("$1" == "-n" && "$2" == "-u") || ("$2" == "-n" && "$3" == "-u") || ("$1" == "-u" && "$2" == "-n") || ("$2" == "-u" && "$3" == "-n") ]]
    then
    # uppercase call to create_pattern
        (tr '[A-Z]' $input ) < string1.txt # feeding pattern into tr
    else
    # lowercase call to create_pattern
        (tr '[a-z]' $input ) < string1.txt
    fi

done 















